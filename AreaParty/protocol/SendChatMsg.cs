//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from: SendChatMsg.proto
// Note: requires additional types generated from: ChatData.proto
namespace protocol
{
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"SendChatReq")]
  public partial class SendChatReq : global::ProtoBuf.IExtensible
  {
    public SendChatReq() {}
    
    private protocol.ChatItem _chatData;
    [global::ProtoBuf.ProtoMember(1, IsRequired = true, Name=@"chatData", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public protocol.ChatItem chatData
    {
      get { return _chatData; }
      set { _chatData = value; }
    }

    private string _where = "";
    [global::ProtoBuf.ProtoMember(2, IsRequired = false, Name=@"where", DataFormat = global::ProtoBuf.DataFormat.Default)]
    [global::System.ComponentModel.DefaultValue("")]
    public string where
    {
      get { return _where; }
      set { _where = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"SendChatRsp")]
  public partial class SendChatRsp : global::ProtoBuf.IExtensible
  {
    public SendChatRsp() {}
    
    private protocol.SendChatRsp.ResultCode _resultCode;
    [global::ProtoBuf.ProtoMember(1, IsRequired = true, Name=@"resultCode", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public protocol.SendChatRsp.ResultCode resultCode
    {
      get { return _resultCode; }
      set { _resultCode = value; }
    }

    private long _chatId = default(long);
    [global::ProtoBuf.ProtoMember(2, IsRequired = false, Name=@"chatId", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    [global::System.ComponentModel.DefaultValue(default(long))]
    public long chatId
    {
      get { return _chatId; }
      set { _chatId = value; }
    }

    private long _date = default(long);
    [global::ProtoBuf.ProtoMember(3, IsRequired = false, Name=@"date", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    [global::System.ComponentModel.DefaultValue(default(long))]
    public long date
    {
      get { return _date; }
      set { _date = value; }
    }

    private string _where = "";
    [global::ProtoBuf.ProtoMember(4, IsRequired = false, Name=@"where", DataFormat = global::ProtoBuf.DataFormat.Default)]
    [global::System.ComponentModel.DefaultValue("")]
    public string where
    {
      get { return _where; }
      set { _where = value; }
    }

    private string _fileDate = "";
    [global::ProtoBuf.ProtoMember(5, IsRequired = false, Name=@"fileDate", DataFormat = global::ProtoBuf.DataFormat.Default)]
    [global::System.ComponentModel.DefaultValue("")]
    public string fileDate
    {
      get { return _fileDate; }
      set { _fileDate = value; }
    }

    private string _peerId = "";
    [global::ProtoBuf.ProtoMember(6, IsRequired = false, Name=@"peerId", DataFormat = global::ProtoBuf.DataFormat.Default)]
    [global::System.ComponentModel.DefaultValue("")]
    public string peerId
    {
      get { return _peerId; }
      set { _peerId = value; }
    }
    [global::ProtoBuf.ProtoContract(Name=@"ResultCode")]
    public enum ResultCode
    {
            
      [global::ProtoBuf.ProtoEnum(Name=@"SUCCESS", Value=0)]
      SUCCESS = 0,
            
      [global::ProtoBuf.ProtoEnum(Name=@"FAIL", Value=1)]
      FAIL = 1
    }
  
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
}